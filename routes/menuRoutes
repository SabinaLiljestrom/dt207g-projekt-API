const express = require("express");
const router = express.Router();
const MenuItem = require("../models/MenuItem"); // Importera menyobjektmodellen
const mongoose = require("mongoose");
const { body, validationResult } = require('express-validator'); // Importera express-validator

// Hämta alla menyobjekt
router.get("/menu", async (req, res) => {
    try {
        const menuItems = await MenuItem.find({});
        res.json(menuItems);
    } catch (error) {
        res.status(500).json({ error: "Serverfel när menyobjekt hämtades" });
    }
});

// Lägg till nytt menyobjekt med validering och sanitärisering
router.post("/menu", [
    body('name').isString().trim().notEmpty().withMessage('Namn är obligatoriskt').escape(), // Validera och sanera namn
    body('price').isFloat({ min: 0 }).withMessage('Priset måste vara ett positivt tal'),    // Validera att pris är ett positivt nummer
    body('description').optional().isString().trim().escape() // Beskrivningen är valfri men saneras om den finns
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });  // Returnera fel om validering misslyckas
    }

    try {
        const menuItem = await MenuItem.create(req.body);
        res.status(201).json(menuItem);
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid skapande av menyobjekt" });
    }
});

// Hämta ett specifikt menyobjekt
router.get("/menu/:id", async (req, res) => {
    try {
        const menuItemId = mongoose.Types.ObjectId(req.params.id); // Konvertera ID:t till ObjectId
        const menuItem = await MenuItem.findById(menuItemId);
        
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json(menuItem);
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid hämtning av rätt" });
    }
});

// Uppdatera ett menyobjekt med validering och sanitärisering
router.put("/menu/:id", [
    body('name').isString().trim().notEmpty().withMessage('Namn är obligatoriskt').escape(), // Validera och sanera namn
    body('price').isFloat({ min: 0 }).withMessage('Priset måste vara ett positivt tal'),    // Validera att pris är ett positivt nummer
    body('description').optional().isString().trim().escape() // Beskrivning är valfri men saneras om den finns
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });  // Returnera fel om validering misslyckas
    }

    try {
        const menuItem = await MenuItem.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json(menuItem);
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid uppdatering av menyobjekt" });
    }
});

// Ta bort ett menyobjekt
router.delete("/menu/:id", async (req, res) => {
    try {
        const menuItem = await MenuItem.findByIdAndDelete(req.params.id);
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json({ message: "Maträtten togs bort", data: menuItem });
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid borttagning av menyobjekt" });
    }
});

module.exports = router;
