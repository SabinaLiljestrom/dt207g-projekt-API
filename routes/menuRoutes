const express = require("express");
const router = express.Router();
const MenuItem = require("../models/MenuItem"); // Importera menyobjektmodellen
const mongoose = require("mongoose");

// Hämta alla menyobjekt
router.get("/menu", async (req, res) => {
    try {
        const menuItems = await MenuItem.find({});
        res.json(menuItems);
    } catch (error) {
        res.status(500).json({ error: "Serverfel när menyobjekt hämtades" });
    }
});

// Lägg till nytt menyobjekt
router.post("/menu", async (req, res) => {
    try {
        const menuItem = await MenuItem.create(req.body);
        res.status(201).json(menuItem);
    } catch (error) {
        if (error.name === 'ValidationError') {
            const errors = Object.keys(error.errors).map(key => ({
                msg: error.errors[key].message
            }));
            return res.status(400).json({ errors });
        } else {
            return res.status(500).json({ error: "Serverfel vid skapande av menyobjekt" });
        }
    }
});
// Hämta ett specifikt menyobjekt
router.get("/menu/:id", async (req, res) => {
    try {
        const menuItemId = mongoose.Types.ObjectId(req.params.id); // Konvertera ID:t till ObjectId
        const menuItem = await MenuItem.findById(menuItemId);
        
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json(menuItem);
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid hämtning av rätt" });
    }
});
// Uppdatera ett menyobjekt
router.put("/menu/:id", async (req, res) => {
    try {
        const menuItem = await MenuItem.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json(menuItem);
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid uppdatering av menyobjekt" });
    }
});

// Ta bort ett menyobjekt
router.delete("/menu/:id", async (req, res) => {
    try {
        const menuItem = await MenuItem.findByIdAndDelete(req.params.id);
        if (!menuItem) {
            return res.status(404).json({ message: "Ingen maträtt hittades med det ID:t" });
        }
        res.json({ message: "Maträtten togs bort", data: menuItem });
    } catch (error) {
        return res.status(500).json({ error: "Serverfel vid borttagning av menyobjekt" });
    }
});

module.exports = router;
